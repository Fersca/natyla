{"name":"Natyla - Startup's Best Friend","tagline":"Natyla is a Full-Stack REST-API/Cache/Key-Value-Store application to configure and run simple APIs in minutes. Written in Golang, it provides the same functionality as a API multithreaded application running with Memcached and MongoDB.","body":"![alt tag](https://github.com/Fersca/natyla/blob/master/logoNatyla.png?raw=true)\r\n\r\nNeed to create an API in 3 minutes? \r\n===================================\r\n1. Download natyla.\r\n2. Start it.\r\n3. POST your information in JSON format.\r\n4. Share the resource URL.\r\n5. Done. Be Happy :)\r\n\r\n\r\nInstall and Run\r\n===============\r\n\r\nJust clone this repository, install [golang](http://golang.org/) and run:\r\n\r\n~~~\r\ngo get\r\ngo run natyla.go\r\n~~~\r\nIt will start Natyla with the default configuration:\r\n  - 10MB memory cache.\r\n  - \"adminToken\" as default token for admin access to PUT/POST/DELETE.\r\n  - $CURRENT_DIR/data as default directory for storing resources and JSON Objects. \r\n~~~\r\nStarting Natyla...\r\nCore numbers:  4\r\nCan't found 'config.json' using default parameters\r\nUsing Config: map[token:adminToken memory:10485760]\r\nMax memory defined as:  10  Mbytes\r\nReady.\r\n-------------------------------\r\n~~~\r\n\r\nCustom Config\r\n=============\r\n\r\nYou can create (or download the example) a config file called config.json, where you can setup a custom configuration.\r\n\r\n~~~\r\n{\r\n  \"token\":\"customToken\",\r\n  \"cache\":false,\r\n  \"memory\":10485760,\r\n  \"data_dir\":\"myDir\"\r\n}\r\n~~~\r\n\r\n\r\nUsing Natyla RESTful API\r\n========================\r\n\r\nNatyla provides a RESTful API to read, update and store JSON resources.\r\n\r\nTo create a resource (a Person), just POST or PUT the JSON object to the specific resource:\r\n~~~\r\ncurl -X POST localhost:8080/Person -d '{\"id\":123456,\"name\":\"Ferdinand\", \"age\":32,\"profession\":\"engineer\"}'\r\n~~~\r\n\r\n**You Always have to provide an \"id\" field**\r\n\r\nIf you want to read a resource, just call the API with the resource ID:\r\n\r\n~~~\r\ncurl localhost:8080/Person/123456\r\n~~~\r\n\r\nYou will get the Stored JSON:\r\n\r\n~~~\r\n{\"id\":123456,\"name\":\"Ferdinand\", \"age\":32,\"profession\":\"engineer\"}\r\n~~~\r\n\r\nIf you are curious, you will notice that Natyla stored the JSON resource under you \"data\" directory.\r\nThe previous example will save the JSON (in plain text) in the following file: \r\n\r\n~~~\r\ndata/Person/123456.json\r\n~~~\r\n\r\nTo delete an Object, just delete it indicating the Object ID:\r\n\r\n~~~\r\ncurl -X DELETE localhost:8080/Person/123456\r\n~~~\r\n\r\n**TODO:** \r\nMultiget: In the near future you will be able to request several recources at the same time. Eg:\r\n\r\n~~~\r\ncurl localhost:8080/Person?ids=123456,789101\r\n~~~\r\nYou will receive:\r\n~~~\r\n[{\"id\":123456,\"name\":\"Ferdinand\", \"age\":32,\"profession\":\"engineer\"},{\"id\":789101,\"name\":\"Norbert\", \"age\":57,\"profession\":\"engineer\"}]\r\n~~~\r\n\r\n\r\nSearching\r\n=========\r\n\r\nIf you want to search for a particular value in a resource field, you should use the \"search\" feature from Natyla.\r\n\r\nE.g: If you want to search for all the \"engineers\" in the \"Person\" resource, just call:\r\n\r\n~~~\r\ncurl localhost:8080/Person/search?field=profession&equal=engineer\r\n~~~\r\n\r\nAnd you will get an array of resources that satisfy the query\r\n\r\n~~~\r\n[{\"id\":123456,\"name\":\"Ferdinand\", \"age\":32,\"profession\":\"engineer\"}]\r\n~~~\r\n\r\n**TODO:**\r\nIn the near future you will be able to do \"like\", \"or\", \"greater than\", etc operations on several fields\r\n\r\nCaching\r\n=======\r\n\r\nIf you keep the caching enabled (default) Natyla will use a 10MB (default) memory cache to store the most used Objects. If you reach the max defined amount of memory, Natyla will only cache the object metadata (but not the object content) it prevents for example invalid disk access for not previously cached DELETES. To disable cache, just add \"cache\":false in the config file.\r\n\r\nFormatting\r\n==========\r\n\r\nNatyla provides a pretty printing format if you call any url from a browser in order to allow your external deverlopers to interact with your API resources in a friendly way :)\r\n\r\nNotifications\r\n=============\r\n\r\n**TODO:**\r\nNatyla is not providing a notification system by now, but it will. \r\nThe idea is the following: If you want to be notified for each resource change, you will be able to register your callback URL and Natyla will notify you with a JSON POST. \r\nThe second notification system will able you to listen to a socket stream and receive the same notifications while you are connected to the channel.\r\n\r\nTelnet Administration\r\n=====================\r\n\r\nYou can manage Natyla by doing a telnet to port 8081. \r\nJust type \"help\" and you will see how to check the memory usage, interact with the resources, etc.","google":"UA-53201155-1","note":"Don't delete this file! It's used internally to help with page regeneration."}