{"name":"Natyla","tagline":"Natyla is a Full-Stack API/Cache/Store application to run simple and super-fast APIs in minutes. Written in Golang, provides all the features that you need for a REST-API.","body":"Natyla\r\n======\r\n\r\n[![Build Status](https://travis-ci.org/Fersca/Natyla.svg?branch=master)](https://travis-ci.org/Fersca/Natyla)\r\n\r\nNatyla is a Full-Stack REST-API/Cache/Key-Value-Store application to configure and run simple APIs in minutes. Written in Golang, it provides the same functionality as a multithreaded application running with Memcached and MongoDB.\r\n\r\nInstall and Run\r\n===============\r\n\r\nJust install [golang](http://golang.org/) and run:\r\n\r\n~~~\r\ngo run natyla.go\r\n~~~\r\nIt will start Natyla with the default configuration:\r\n  - 10MB memory cache.\r\n  - \"adminToken\" as default token for admin access to PUT/POST/DELETE.\r\n  - $CURRENT_DIR/data as default directory for storing resources and JSON Objects. \r\n~~~\r\nStarting Natyla...\r\nCore numbers:  4\r\nCan't found 'config.json' using default parameters\r\nUsing Config: map[token:adminToken memory:10485760]\r\nMax memory defined as:  10  Mbytes\r\nReady.\r\n-------------------------------\r\n~~~\r\n\r\nCustom Config\r\n=============\r\n\r\nYou can create (or download the example) a config file called config.json, where you can setup a custom configuration.\r\n\r\n~~~\r\n{\r\n  \"token\":\"customToken\",\r\n  \"cache\":false,\r\n  \"memory\":10485760,\r\n  \"data_dir\":\"myDir\"\r\n}\r\n~~~\r\n\r\n\r\nUsing Natyla RESTful API\r\n========================\r\n\r\nNatyla provides a RESTful API to read, update and store JSON resources.\r\n\r\nTo create a resource (a Person), just POST or PUT the JSON object to the specific resource:\r\n~~~\r\ncurl -X POST localhost:8080/Person -d '{\"id\":123456,\"name\":\"Ferdinand\", \"age\":32,\"profession\":\"engineer\"}'\r\n~~~\r\n\r\n**You Always have to provide an \"id\" field**\r\n\r\nIf you want to read a resource, just call the API with the resource ID:\r\n\r\n~~~\r\ncurl -X POST localhost:8080/Person/123456\r\n~~~\r\n\r\nYou will get the Stored JSON:\r\n\r\n~~~\r\n{\"id\":123456,\"name\":\"Ferdinand\", \"age\":32,\"profession\":\"engineer\"}\r\n~~~\r\n\r\nIf you are curious, you will notice that Natyla stored the JSON resource under you \"data\" directory.\r\nThe previous example will save the JSON (in plain text) in the following file: \r\n\r\n~~~\r\ndata/Person/123456.json\r\n~~~\r\n\r\nTo delete an Object, just delete it indicating the Object ID:\r\n\r\n~~~\r\ncurl -X DELETE localhost:8080/Person/123456\r\n~~~\r\n\r\nCaching\r\n=======\r\n\r\nIf you keep the caching enabled (default) Natyla will use a 10MB (default) memory cache to store the most used Objects. If you reach the max defined amount of memory, Natyla will only cache the object metadata (but not the object content) it prevents for example invalid disk access for not previously cached DELETES. To disable cache, just add \"cache\":false in the config file.\r\n","google":"UA-53201155-1","note":"Don't delete this file! It's used internally to help with page regeneration."}